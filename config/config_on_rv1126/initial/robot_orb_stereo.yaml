%YAML:1.0
---
imu: 1
num_of_cam: 2

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
# 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

data_path: /media/usb0/sweeprobot/01/
save_path: /media/usb0/sweeprobot/01/result_new/
voc_path: /data/ttt/initial/orbvoc.dbow3

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"

Camera.type: "PinHole"

Camera_fx: 673.87557957699221
Camera_fy: 673.87557957699221
Camera_cx: 310.81644058227539
Camera_cy: 245.46117401123047

Camera_k1: 0.0
Camera_k2: 0.0
Camera_p1: 0.0
Camera_p2: 0.0

Camera.bFishEye: 0

Camera_width: 640
Camera_height: 480
image_width: 640
image_height: 480

Camera.fps: 50.0

Camera.bf: 80.693107639419338

Camera.scale: 1.0

Camera.RGB: 0

ThDepth: 40.0

cameraMatrixL: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [ 651.159842145355, 0., 310.3888381507878, 0.,
          651.2214809798, 249.80465142209846, 0., 0., 1. ]
cameraMatrixR: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [ 652.120648694453, 0., 315.1078414781578, 0.,
          652.2911305728726, 239.80333583406698, 0., 0., 1. ]
distCoeffsL: !!opencv-matrix
  rows: 1
  cols: 5
  dt: d
  data: [ 0.17844919849315125, -0.6031265230206097,
          0.00038543420819411964, -0.0010299654540033743 ]
distCoeffsR: !!opencv-matrix
  rows: 1
  cols: 5
  dt: d
  data: [ 0.1919812472503346, -0.6314667618021476,
          7.264843421361649e-5, -1.7638160170148716e-5 ]

#/*****IMU*****/
# Transformation from camera 0 to body-frame (imu) 
Tbc: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   data: [-0.01078808,-0.0053516,-0.99992749,-0.0190819,0.99993588,0.0033851,-0.01080629,-0.04077015,0.00344269,-0.99997995,0.00531474,0.10690639,0.,0.,0.,1.]

# Transformation from odometer to camera 0
Tc_odo: !!opencv-matrix
  rows: 4
  cols: 4
  dt: f
  data: [-0.0,-1.0,-0.0, 0.06,-0.0,-0.0,-1.0, 0.15564,1.0, 0.0, 0.0,-0.138,0.0, 0.0, 0.0, 1.0]

# IMU noise 连续的

#imu parameters       The more accurate parameters you provide, the better performance
IMU.NoiseGyro: 0.0014006108167209043   # [ rad / s / sqrt(Hz) ]   ( gyro "white noise" ) 连续的
IMU.NoiseAcc: 0.022705341628918071  
IMU.GyroWalk: 0.000050477689654109284
IMU.AccWalk: 0.00071342588229465884
IMU.Frequency: 190
g_norm: 9.7964     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
# initial value of time offset. unit:s. readed image clock + td = real image clock (IMU clock)
td: -0.008                             

LEFT.height: 480
LEFT.width: 640
LEFT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data: [ 2.1864469791802851e-01, -1.0899375627495136e+00,
       6.1892353468128737e-04, -3.6107421851300692e-04,
       1.5094480928669987e+00 ]
LEFT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 6.5063513961962474e+02, 0., 3.1102386215829705e+02, 0.,
       6.5073383200409421e+02, 2.5009704771269028e+02, 0., 0., 1. ]
#旋转矩阵 Twc0
LEFT.R: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 9.9999823574256319e-01, -1.0428401771092769e-03,
       1.5623687548084689e-03, 1.0415754557291396e-03,
       9.9999912944123859e-01, 8.1008477020992956e-04,
       -1.5632121836199298e-03, -8.0845601606403859e-04,
       9.9999845138207055e-01 ]
LEFT.P: !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [ 6.7387557957699221e+02, 0., 3.1081644058227539e+02, 0., 0.,
       6.7387557957699221e+02, 2.4546117401123047e+02, 0., 0., 0., 1.,
       0. ]

RIGHT.height: 480
RIGHT.width: 640
RIGHT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data: [ 1.7725360966026635e-01, -4.7404870771792829e-01,
       4.5287494639198569e-04, -1.2173467807103197e-05,
       -4.9121830167314789e-01 ]
RIGHT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 6.5228647347506649e+02, 0., 3.1514002092369026e+02, 0.,
       6.5243178341923442e+02, 2.4035641300705899e+02, 0., 0., 1. ]
#旋转矩阵 Twc1
RIGHT.R: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 9.9999909366928852e-01, 1.7514586024032356e-04,
       1.3349099329193050e-03, -1.7406549907962720e-04,
       9.9999965729679174e-01, -8.0938711437886907e-04,
       -1.3350512362438334e-03, 8.0915401904277416e-04,
       9.9999878145324272e-01 ]
RIGHT.P: !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [ 6.7387557957699221e+02, 0., 3.1081644058227539e+02,
       -8.0693107639419337e+04, 0., 6.7387557957699221e+02,
       2.4546117401123047e+02, 0., 0., 0., 1., 0. ]

ORBextractor.nFeatures: 500
ORBextractor.scaleFactor: 1.2
ORBextractor.nLevels: 8
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7
Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3
Viewer.ViewpointX: 0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 500
